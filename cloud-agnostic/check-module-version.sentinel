# This policy uses the tfconfig/v2 import to require approved module versions

import "tfconfig-functions" as config
import "version" as ver
import "strings"

allowed_modules = { 
    "vpc": "3.18.1",
    "s3_bucket": "3.6.0",
    "security-group": "4.16.2",
}

# Get all modules
allModuleCalls = config.find_all_module_calls()

# Get all module calls that has a version_constraint.
# Compare version to make sure it's not less then our set version.
get_module_violations = func(modules, allowed) {
    violators = {}
    for modules as k, v {
        for allowed as module, version {
           if module == k {
                if {module:version} is not {k:v.version_constraint} {
                        violators[module] = {k:v.version_constraint}
                }
            }
        }
    }
    return violators
}

# Function call to compare modules in template to allowed map
violatingModuleCalls = get_module_violations(allModuleCalls, allowed_modules)

for violatingModuleCalls as k, v {
 print("Module", k+":v"+ v[k], "does not have the minimum allowed version")
}

# Main rule
main = rule {
  length(violatingModuleCalls) is 0
}